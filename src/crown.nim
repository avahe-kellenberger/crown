import
  std/terminal,
  std/parseopt,
  std/strformat,
  std/strutils,
  std/symlinks,
  std/paths,
  std/os,
  std/syncio

const
  configFileName = "crown.nims"
  modulesDir = "./.modules"

proc printHelp() =
  echo fmt"""
    Options:
      --help
        Prints this help message
  """.dedent()

  stdout.write("  --link ")
  stdout.styledWriteLine(styleItalic, "path")
  echo "    Symlinks a local dependency to the local project\n"

  stdout.write("  --unlink ")
  stdout.styledWriteLine(styleItalic, "dependency_name")
  echo "    Unlinks a local dependency"

proc createConfigFile() =
  writeFile(
    configFileName,
    """
    # AUTO-GENERATED BY CROWN
    import std/strformat
    for dep in listDirs("./modules/*"):
      switch("path", fmt"./.modules/{dep}")

    # Manage dependencies here

    ## Examples:

    # Require a minimum version
    # requires "https://github.com/avahe-kellenberger/safeseq.git >= 0.1.1"

    # Require a specific commit hash
    # requires "https://github.com/avahe-kellenberger/nimtest.git#17bd3a0f794106428b8592c69832bf48c97b23e2"

    # Assumes local development of a symlinked package (e.g. crown --link ../shade)
    # requires "shade >= 0.1.0"

    """.dedent()
  )

  var f: File
  discard f.open("config.nims", fmReadWriteExisting)
  let content = f.readAll()
  f.setFilePos(0)
  f.writeLine("# AUTO-GENERATED IMPORT BY CROWN")
  f.writeLine("import \"crown.nims\"\n")
  f.write(content)
  f.close()

proc link(remainingArgs: openArray[string]) =
  if remainingArgs.len < 2:
    stderr.writeLine("Error: A path to the local dependency to symlink must be provided!")
    return

  if not fileExists(configFileName):
    createConfigFile()

  let pathToDependency = remainingArgs[1]
  if not dirExists(modulesDir):
    createDir(modulesDir)

  createSymlink(
    absolutePath(Path pathToDependency),
    Path(modulesDir) / lastPathPart(Path pathToDependency)
  )

proc unlink(remainingArgs: openArray[string]) =
  if remainingArgs.len < 2:
    stderr.writeLine("Error: The name of the dependency to unlink must be provided!")
    return
  removeFile(modulesDir / remainingArgs[1])

when isMainModule:
  var optParser = initOptParser()
  let remainingArgs = optParser.remainingArgs()
  # Only supporting one option at a time, currently.
  if remainingArgs.len == 0:
    printHelp()
    quit()

  let command = remainingArgs[0]
  case command:
    of "--link":
      link(remainingArgs)
    of "--unlink":
      unlink(remainingArgs)
    else:
      printHelp()

